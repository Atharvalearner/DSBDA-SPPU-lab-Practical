import pandas as pd
import numpy as np

df = pd.read_csv('C:/Users/darsh/Desktop/Datasets/Group B/dataset_Facebook.csv',delimiter=';')
df

df.describe()

#subset by column name
subset1 = df[['like','share']]
subset1

#subset by column name
subset2 = df[['comment','Type']]
subset2

#subset by loc
df.loc[:10]

#subset by loc
subset3 = df.loc[0:3,['comment','Type','like']]
subset3

#subset by iloc
subset4 = df.iloc[[0,1,3,6],[0,2]]
subset4

#subset by condition
subset5 = df.like>100
subset5

subset6 = df[['Page total likes', "Type", "Category", "Post Month"]]
subset6

subset7 = df[['Page total likes', "Type","Category","Paid"]]
subset7

#Method 1 for Mereged Data
merged_data  = pd.merge(subset2, subset1, left_on='comment', right_on= 'like')
merged_data

#Method 2 for Mereged Data
subset6.merge(subset7)

#Method 3 for Merge Data
Join = subset3.join(subset4)
Join

#Method 4 for Merge Data
concatenated = pd.concat([subset4, subset5])
concatenated

# Sorting merged_data in descending order wrt 'Like'
merged_data.sort_values(by=['like'],ascending=False)

# Sorting merged_data in descending order wrt 'Like' using Quick Sort
merged_data.sort_values(by=['like'],ascending=False,kind="Quick Sort")

# sorts the subset7 by the values in the column 'Page total likes' in ascending order.
subset7.sort_values(by=['Page total likes'])
subset7

# Method 1 for transpose
merged_data.transpose()

# Method 2 for transpose
merged_data.T

#Reshape using pd.pivot_table
pivot_table = pd.pivot_table(df, index = ['Type','Category'], values='like')
pivot_table

Join_subset = Join.loc[:2]
Join_subset

#Reshape using pd.pivot
Join_subset.pivot(index='comment', columns='Type', values='like')

#Reshape using pd.melt
pd.melt(df, id_vars =['Type'], value_vars =['comment'])

#Reshape using pd.melt
pd.melt(Join_subset, id_vars =['Type'])

#Reshape
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
newarr = arr.reshape(4, 3)
newarr

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

df.dropna(inplace=True)

# Splitting the data into features (X) and target variable (y)
X = df.drop(columns=['Total Interactions'])
y = df['Total Interactions']

# Encoding categorical variables
X = pd.get_dummies(X)

# Model Selection
model = LinearRegression()

# Model Training
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model.fit(X_train, y_train)

# Model Evaluation
y_pred = model.predict(X_test)
y_pred

def regression_report(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = mean_squared_error(y_true, y_pred, squared=False)  # Root Mean Squared Error
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    
    print("Regression Report:")
    print("Mean Squared Error (MSE):", mse)
    print("Root Mean Squared Error (RMSE):", rmse)
    print("Mean Absolute Error (MAE):", mae)
    print("R-squared (R2):", r2)

# Usage:
regression_report(y_test, y_pred)