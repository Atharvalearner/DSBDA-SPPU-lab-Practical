import pandas as pd
import numpy as np

df = pd.read_csv('C:/Users/darsh/Desktop/Datasets/Group B/airquality.csv')
df

df.info()

df.columns

df = df.drop_duplicates()
df

#Finding null values in each column
df.isna()

#Finding null values in each column
df.isnull().sum()


# Replacing missing values with mean
df.fillna('0', inplace=True)
df


# Dropping duplicate rows
df.drop_duplicates(inplace=True)
df

#Finding null values in each column
df.isnull().sum()

subset1 = df[['PM2.5','PM10','NO','NO2']]

subset2 = df[['NOx','NH3','CO','SO2']]

subset3 = df.iloc[[0,1,3,6],[0,2]]

subset4 = df.iloc[[2,4,5,7],[1,3]]

#Method 1 for Merge Data
Join = subset2.join(subset1)
Join

#Method 2 for Merge Data
subset3.merge(right=subset4,how='cross')

#Method 3 for Merge Data
concatenated = pd.concat([subset1, subset2])
concatenated

#Method 4 for Merge Data
merged_df = subset3.merge(right=subset4,how='cross')
merged_df.head()

df['PM2.5'] = pd.to_numeric(df['PM2.5'], errors='coerce')

#finding square root
result=np.sqrt(df['PM2.5'])
result

#finding cube root
result=np.cbrt(df['PM2.5'])
result

#finding square
result=np.square(df['PM2.5'])
result

#finding cube
result=np.power(df['PM2.5'],3)
result

#finding natural log
result=np.log(df['PM2.5'])
result

#finding log 10
result=np.log10(df['PM2.5'])
result

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

df['Date'] = pd.to_datetime(df['Date'])

# Split data into features and target variable
X = df[['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene']]
y = df['AQI']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model selection and training
model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_pred

def regression_report(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = mean_squared_error(y_true, y_pred, squared=False)  # Root Mean Squared Error
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    
    print("Regression Report:")
    print("Mean Squared Error (MSE):", mse)
    print("Root Mean Squared Error (RMSE):", rmse)
    print("Mean Absolute Error (MAE):", mae)
    print("R-squared (R2):", r2)

# Usage:
regression_report(y_test, y_pred)